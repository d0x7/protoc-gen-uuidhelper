// Code generated by protoc-gen-uuidhelper-kotlin. DO NOT EDIT.
// Versions:
// - protoc-gen-uuidhelper-kotlin v0.2.3+dirty
// - protoc v5.29.3
// source: test.proto

package li.xiam.uuidhelper.test

import com.google.protobuf.ByteString
import java.util.*
import java.nio.ByteBuffer

// Converts UUID to ByteString (protobuf `bytes`)
private fun uuidToByteString(uuid: UUID): ByteString {
	val buffer = ByteBuffer.allocate(16)
	buffer.putLong(uuid.mostSignificantBits)
	buffer.putLong(uuid.leastSignificantBits)
	buffer.flip()
	return ByteString.copyFrom(buffer)
}

// Converts ByteString to UUID
private fun byteStringToUUID(bytes: ByteString): UUID {
	val buffer = bytes.asReadOnlyByteBuffer()
	return UUID(buffer.long, buffer.long)
}

/**
 * Gets or sets the internal UUID.
 *
 * When getting, converts the underlying ByteString to a UUID.
 * When setting, converts the UUID to a ByteString for Protobuf.
 */
var PlayerKt.Dsl.InternalUUID: UUID
    get() = byteStringToUUID(this.internalUuid)
    set(value) {
        this.internalUuid = uuidToByteString(value)
    }

/**
 * Gets the internal UUID.
 *
 * Converts the underlying ByteString to a UUID.
 */
val Test.Player.InternalUUID: UUID
	get() = byteStringToUUID(this.internalUuid)

/**
 * Gets or sets the session UUID.
 *
 * When getting, converts the underlying ByteString to a UUID.
 * When setting, converts the UUID to a ByteString for Protobuf.
 */
var PlayerKt.Dsl.SessionUUID: UUID
    get() = byteStringToUUID(this.sessionUuid)
    set(value) {
        this.sessionUuid = uuidToByteString(value)
    }

/**
 * Gets the session UUID.
 *
 * Converts the underlying ByteString to a UUID.
 */
val Test.Player.SessionUUID: UUID
	get() = byteStringToUUID(this.sessionUuid)

/**
 * Gets the list of game UUIDs.
 * Note: This list is read-only. Use addGameUUIDs(), setGameUUIDs(), or clearGameUUIDs() to modify.
 */
val PlayerKt.Dsl.GameUUIDs: List<UUID>
	get() = gameUuids.map { byteStringToUUID(it) }

/**
 * Gets a game UUID at the specified index.
 *
 * @param index The index of the game UUID to get.
 * @return The game UUID at the specified index.
 * @throws IndexOutOfBoundsException if the index is out of range.
 * @see GameUUIDs for the full list.
 * @see setGameUUIDs for bulk replacement.
 */
fun PlayerKt.Dsl.getGameUUIDsAt(index: Int): UUID {
	require(index in gameUuids.indices) {
		"Index $index out of bounds for list of size ${gameUuids.size}"
	}
	return byteStringToUUID(this.gameUuids[index])
}

/**
 * Replaces all game UUIDs with the provided collection.
 *
 * This method clears the existing list and adds all UUIDs from the
 * provided collection in order.
 *
 * @param value The collection of UUIDs to set.
 * @see addGameUUIDs for adding without clearing.
 * @see addAllGameUUIDs for bulk addition.
 * @see clearGameUUIDs for clearing the list.
 */
fun PlayerKt.Dsl.setGameUUIDs(value: Collection<UUID>) {
	val list = value.map { uuidToByteString(it) }
	gameUuids.clear()
	gameUuids.addAll(list)
}

/**
 * Clears the backing list of game UUIDs.
 *
 * After calling this method, the list will be empty.
 *
 * @see addGameUUIDs for adding new UUIDs.
 * @see setGameUUIDs for replacing the entire list.
 */
fun PlayerKt.Dsl.clearGameUUIDs() {
	gameUuids.clear()
}

/**
 * Adds one or more game UUIDs to the backing list.
 * This method appends the provided UUIDs to the existing list without
 * clearing it first.
 *
 * @param values The game UUIDs to add.
 * @see addAllGameUUIDs for adding a collection of UUIDs.
 * @see setGameUUIDs for replacing the entire list.
 * @see clearGameUUIDs for clearing the list.
 */
fun PlayerKt.Dsl.addGameUUIDs(vararg values: UUID) = values.forEach { gameUuids.add(uuidToByteString(it)) }

/**
 * Adds a collection of game UUIDs to the backing list.
 *
 * @param values The collection of game UUIDs to add.
 * @see addGameUUIDs for adding individual UUIDs.
 * @see setGameUUIDs for replacing the entire list.
 * @see clearGameUUIDs for clearing the list.
 */
fun PlayerKt.Dsl.addAllGameUUIDs(values: Collection<UUID>) = values.forEach { gameUuids.add(uuidToByteString(it)) }

/**
 * Gets the list of game UUIDs.
 * Note: This list is read-only. To modify UUIDs, use the DSL builder methods.
 */
val Test.Player.GameUUIDs: List<UUID>
	get() = gameUuidsList.map { byteStringToUUID(it) }

/**
 * Gets a game UUID at the specified index.
 * @param index The index of the game UUID to get.
 * @return The game UUID at the specified index.
 * @see GameUUIDs for the full list.
 */
fun Test.Player.getGameUUIDsAt(index: Int): UUID {
	require(index in gameUuidsList.indices) {
		"Index $index out of bounds for list of size ${gameUuidsList.size}"
	}
	return byteStringToUUID(this.gameUuidsList[index])
}

/**
 * Gets or sets the v1 UUID.
 *
 * When getting, converts the underlying ByteString to a UUID.
 * When setting, converts the UUID to a ByteString for Protobuf.
 */
var PlayerKt.Dsl.V1UUID: UUID?
    get() {
        if (this.hasV1Uuid()) {
            return null
        }
        return byteStringToUUID(this.v1Uuid)
    }
    set(value) {
        require(value != null) { "v1UUID cannot be null" }
        this.v1Uuid = uuidToByteString(value)
    }

/**
 * Gets the v1 UUID.
 *
 * Converts the underlying ByteString to a UUID.
 */
val Test.Player.V1UUID: UUID?
    get() {
        if (this.hasV1Uuid()) {
            return null
        }
        return byteStringToUUID(this.v1Uuid)
    }

/**
 * Gets or sets the v2 UUID.
 *
 * When getting, converts the underlying ByteString to a UUID.
 * When setting, converts the UUID to a ByteString for Protobuf.
 */
var PlayerKt.Dsl.V2UUID: UUID?
    get() {
        if (this.hasV2Uuid()) {
            return null
        }
        return byteStringToUUID(this.v2Uuid)
    }
    set(value) {
        require(value != null) { "v2UUID cannot be null" }
        this.v2Uuid = uuidToByteString(value)
    }

/**
 * Gets the v2 UUID.
 *
 * Converts the underlying ByteString to a UUID.
 */
val Test.Player.V2UUID: UUID?
    get() {
        if (this.hasV2Uuid()) {
            return null
        }
        return byteStringToUUID(this.v2Uuid)
    }

/**
 * Gets or sets the nested UUID.
 *
 * When getting, converts the underlying ByteString to a UUID.
 * When setting, converts the UUID to a ByteString for Protobuf.
 */
var NestedMsgKt.Dsl.NestedUUID: UUID
    get() = byteStringToUUID(this.nestedUuid)
    set(value) {
        this.nestedUuid = uuidToByteString(value)
    }

/**
 * Gets the nested UUID.
 *
 * Converts the underlying ByteString to a UUID.
 */
val Test.NestedMsg.NestedUUID: UUID
	get() = byteStringToUUID(this.nestedUuid)

/**
 * Gets or sets the opt UUID.
 *
 * When getting, converts the underlying ByteString to a UUID.
 * When setting, converts the UUID to a ByteString for Protobuf.
 */
var PlayerKt.Dsl.OptUUID: UUID?
    get() {
        if (this.hasOptUuid()) {
            return null
        }
        return byteStringToUUID(this.optUuid)
    }
    set(value) {
        require(value != null) { "optUUID cannot be null" }
        this.optUuid = uuidToByteString(value)
    }

/**
 * Gets the opt UUID.
 *
 * Converts the underlying ByteString to a UUID.
 */
val Test.Player.OptUUID: UUID?
    get() {
        if (this.hasOptUuid()) {
            return null
        }
        return byteStringToUUID(this.optUuid)
    }

// Field 'map_int32_uuid': Maps is not supported in Kotlin yet.

// Field 'map_int64_uuid': Maps is not supported in Kotlin yet.

// Field 'map_uint32_uuid': Maps is not supported in Kotlin yet.

// Field 'map_uint64_uuid': Maps is not supported in Kotlin yet.

// Field 'map_sint32_uuid': Maps is not supported in Kotlin yet.

// Field 'map_sint64_uuid': Maps is not supported in Kotlin yet.

// Field 'map_fixed32_uuid': Maps is not supported in Kotlin yet.

// Field 'map_fixed64_uuid': Maps is not supported in Kotlin yet.

// Field 'map_sfixed32_uuid': Maps is not supported in Kotlin yet.

// Field 'map_sfixed64_uuid': Maps is not supported in Kotlin yet.

// Field 'map_bool_uuid': Maps is not supported in Kotlin yet.

// Field 'map_string_uuid': Maps is not supported in Kotlin yet.

// Field 'map_int32_uuids': Maps is not supported in Kotlin yet.

// Field 'map_int64_uuids': Maps is not supported in Kotlin yet.

// Field 'map_uint32_uuids': Maps is not supported in Kotlin yet.

// Field 'map_uint64_uuids': Maps is not supported in Kotlin yet.

// Field 'map_sint32_uuids': Maps is not supported in Kotlin yet.

// Field 'map_sint64_uuids': Maps is not supported in Kotlin yet.

// Field 'map_fixed32_uuids': Maps is not supported in Kotlin yet.

// Field 'map_fixed64_uuids': Maps is not supported in Kotlin yet.

// Field 'map_sfixed32_uuids': Maps is not supported in Kotlin yet.

// Field 'map_sfixed64_uuids': Maps is not supported in Kotlin yet.

// Field 'map_bool_uuids': Maps is not supported in Kotlin yet.

// Field 'map_string_uuids': Maps is not supported in Kotlin yet.

/**
 * Gets or sets the child UUID.
 *
 * When getting, converts the underlying ByteString to a UUID.
 * When setting, converts the UUID to a ByteString for Protobuf.
 */
var ChildKt.Dsl.ChildUUID: UUID
    get() = byteStringToUUID(this.childUuid)
    set(value) {
        this.childUuid = uuidToByteString(value)
    }

/**
 * Gets the child UUID.
 *
 * Converts the underlying ByteString to a UUID.
 */
val Test.Child.ChildUUID: UUID
	get() = byteStringToUUID(this.childUuid)

/**
 * Gets the list of child UUIDs.
 * Note: This list is read-only. Use addChildUUIDs(), setChildUUIDs(), or clearChildUUIDs() to modify.
 */
val ChildKt.Dsl.ChildUUIDs: List<UUID>
	get() = childUuids.map { byteStringToUUID(it) }

/**
 * Gets a child UUID at the specified index.
 *
 * @param index The index of the child UUID to get.
 * @return The child UUID at the specified index.
 * @throws IndexOutOfBoundsException if the index is out of range.
 * @see ChildUUIDs for the full list.
 * @see setChildUUIDs for bulk replacement.
 */
fun ChildKt.Dsl.getChildUUIDsAt(index: Int): UUID {
	require(index in childUuids.indices) {
		"Index $index out of bounds for list of size ${childUuids.size}"
	}
	return byteStringToUUID(this.childUuids[index])
}

/**
 * Replaces all child UUIDs with the provided collection.
 *
 * This method clears the existing list and adds all UUIDs from the
 * provided collection in order.
 *
 * @param value The collection of UUIDs to set.
 * @see addChildUUIDs for adding without clearing.
 * @see addAllChildUUIDs for bulk addition.
 * @see clearChildUUIDs for clearing the list.
 */
fun ChildKt.Dsl.setChildUUIDs(value: Collection<UUID>) {
	val list = value.map { uuidToByteString(it) }
	childUuids.clear()
	childUuids.addAll(list)
}

/**
 * Clears the backing list of child UUIDs.
 *
 * After calling this method, the list will be empty.
 *
 * @see addChildUUIDs for adding new UUIDs.
 * @see setChildUUIDs for replacing the entire list.
 */
fun ChildKt.Dsl.clearChildUUIDs() {
	childUuids.clear()
}

/**
 * Adds one or more child UUIDs to the backing list.
 * This method appends the provided UUIDs to the existing list without
 * clearing it first.
 *
 * @param values The child UUIDs to add.
 * @see addAllChildUUIDs for adding a collection of UUIDs.
 * @see setChildUUIDs for replacing the entire list.
 * @see clearChildUUIDs for clearing the list.
 */
fun ChildKt.Dsl.addChildUUIDs(vararg values: UUID) = values.forEach { childUuids.add(uuidToByteString(it)) }

/**
 * Adds a collection of child UUIDs to the backing list.
 *
 * @param values The collection of child UUIDs to add.
 * @see addChildUUIDs for adding individual UUIDs.
 * @see setChildUUIDs for replacing the entire list.
 * @see clearChildUUIDs for clearing the list.
 */
fun ChildKt.Dsl.addAllChildUUIDs(values: Collection<UUID>) = values.forEach { childUuids.add(uuidToByteString(it)) }

/**
 * Gets the list of child UUIDs.
 * Note: This list is read-only. To modify UUIDs, use the DSL builder methods.
 */
val Test.Child.ChildUUIDs: List<UUID>
	get() = childUuidsList.map { byteStringToUUID(it) }

/**
 * Gets a child UUID at the specified index.
 * @param index The index of the child UUID to get.
 * @return The child UUID at the specified index.
 * @see ChildUUIDs for the full list.
 */
fun Test.Child.getChildUUIDsAt(index: Int): UUID {
	require(index in childUuidsList.indices) {
		"Index $index out of bounds for list of size ${childUuidsList.size}"
	}
	return byteStringToUUID(this.childUuidsList[index])
}

// Field 'map_child_uuid': Maps is not supported in Kotlin yet.


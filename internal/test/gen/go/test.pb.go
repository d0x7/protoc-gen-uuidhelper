// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.29.3
// source: test.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Single UUIDs
	InternalUuid []byte `protobuf:"bytes,1,opt,name=internal_uuid,json=internalUuid,proto3" json:"internal_uuid,omitempty"`
	Username     string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	SessionUuid  []byte `protobuf:"bytes,3,opt,name=session_uuid,json=sessionUuid,proto3" json:"session_uuid,omitempty"`
	StringUuid   string `protobuf:"bytes,4,opt,name=string_uuid,json=stringUuid,proto3" json:"string_uuid,omitempty"`
	// List UUIDs
	GameUuids [][]byte `protobuf:"bytes,5,rep,name=game_uuids,json=gameUuids,proto3" json:"game_uuids,omitempty"`
	// Oneof UUIDs
	//
	// Types that are assignable to VersionedUuid:
	//
	//	*Player_V1Uuid
	//	*Player_V2Uuid
	VersionedUuid  isPlayer_VersionedUuid `protobuf_oneof:"versioned_uuid"`
	Nested         *Player_NestedMsg      `protobuf:"bytes,8,opt,name=nested,proto3" json:"nested,omitempty"`
	OptionalNested *Player_NestedMsg      `protobuf:"bytes,9,opt,name=optional_nested,json=optionalNested,proto3,oneof" json:"optional_nested,omitempty"`
	// Optional UUID
	OptUuid []byte `protobuf:"bytes,10,opt,name=opt_uuid,json=optUuid,proto3,oneof" json:"opt_uuid,omitempty"`
	// Map UUIDs
	MapInt32Uuid     map[int32][]byte  `protobuf:"bytes,11,rep,name=map_int32_uuid,json=mapInt32Uuid,proto3" json:"map_int32_uuid,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64Uuid     map[int64][]byte  `protobuf:"bytes,12,rep,name=map_int64_uuid,json=mapInt64Uuid,proto3" json:"map_int64_uuid,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint32Uuid    map[uint32][]byte `protobuf:"bytes,13,rep,name=map_uint32_uuid,json=mapUint32Uuid,proto3" json:"map_uint32_uuid,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint64Uuid    map[uint64][]byte `protobuf:"bytes,14,rep,name=map_uint64_uuid,json=mapUint64Uuid,proto3" json:"map_uint64_uuid,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapSint32Uuid    map[int32][]byte  `protobuf:"bytes,15,rep,name=map_sint32_uuid,json=mapSint32Uuid,proto3" json:"map_sint32_uuid,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapSint64Uuid    map[int64][]byte  `protobuf:"bytes,16,rep,name=map_sint64_uuid,json=mapSint64Uuid,proto3" json:"map_sint64_uuid,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapFixed32Uuid   map[uint32][]byte `protobuf:"bytes,17,rep,name=map_fixed32_uuid,json=mapFixed32Uuid,proto3" json:"map_fixed32_uuid,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapFixed64Uuid   map[uint64][]byte `protobuf:"bytes,18,rep,name=map_fixed64_uuid,json=mapFixed64Uuid,proto3" json:"map_fixed64_uuid,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapSfixed32Uuid  map[int32][]byte  `protobuf:"bytes,19,rep,name=map_sfixed32_uuid,json=mapSfixed32Uuid,proto3" json:"map_sfixed32_uuid,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapSfixed64Uuid  map[int64][]byte  `protobuf:"bytes,20,rep,name=map_sfixed64_uuid,json=mapSfixed64Uuid,proto3" json:"map_sfixed64_uuid,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapBoolUuid      map[bool][]byte   `protobuf:"bytes,21,rep,name=map_bool_uuid,json=mapBoolUuid,proto3" json:"map_bool_uuid,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringUuid    map[string][]byte `protobuf:"bytes,22,rep,name=map_string_uuid,json=mapStringUuid,proto3" json:"map_string_uuid,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Uuids    map[int32][]byte  `protobuf:"bytes,23,rep,name=map_int32_uuids,json=mapInt32Uuids,proto3" json:"map_int32_uuids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64Uuids    map[int64][]byte  `protobuf:"bytes,24,rep,name=map_int64_uuids,json=mapInt64Uuids,proto3" json:"map_int64_uuids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint32Uuids   map[uint32][]byte `protobuf:"bytes,25,rep,name=map_uint32_uuids,json=mapUint32Uuids,proto3" json:"map_uint32_uuids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint64Uuids   map[uint64][]byte `protobuf:"bytes,26,rep,name=map_uint64_uuids,json=mapUint64Uuids,proto3" json:"map_uint64_uuids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapSint32Uuids   map[int32][]byte  `protobuf:"bytes,27,rep,name=map_sint32_uuids,json=mapSint32Uuids,proto3" json:"map_sint32_uuids,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapSint64Uuids   map[int64][]byte  `protobuf:"bytes,28,rep,name=map_sint64_uuids,json=mapSint64Uuids,proto3" json:"map_sint64_uuids,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapFixed32Uuids  map[uint32][]byte `protobuf:"bytes,29,rep,name=map_fixed32_uuids,json=mapFixed32Uuids,proto3" json:"map_fixed32_uuids,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapFixed64Uuids  map[uint64][]byte `protobuf:"bytes,30,rep,name=map_fixed64_uuids,json=mapFixed64Uuids,proto3" json:"map_fixed64_uuids,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapSfixed32Uuids map[int32][]byte  `protobuf:"bytes,31,rep,name=map_sfixed32_uuids,json=mapSfixed32Uuids,proto3" json:"map_sfixed32_uuids,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapSfixed64Uuids map[int64][]byte  `protobuf:"bytes,32,rep,name=map_sfixed64_uuids,json=mapSfixed64Uuids,proto3" json:"map_sfixed64_uuids,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapBoolUuids     map[bool][]byte   `protobuf:"bytes,33,rep,name=map_bool_uuids,json=mapBoolUuids,proto3" json:"map_bool_uuids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringUuids   map[string][]byte `protobuf:"bytes,34,rep,name=map_string_uuids,json=mapStringUuids,proto3" json:"map_string_uuids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Child            *Child            `protobuf:"bytes,35,opt,name=child,proto3" json:"child,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

func (x *Player) GetInternalUuid() []byte {
	if x != nil {
		return x.InternalUuid
	}
	return nil
}

func (x *Player) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Player) GetSessionUuid() []byte {
	if x != nil {
		return x.SessionUuid
	}
	return nil
}

func (x *Player) GetStringUuid() string {
	if x != nil {
		return x.StringUuid
	}
	return ""
}

func (x *Player) GetGameUuids() [][]byte {
	if x != nil {
		return x.GameUuids
	}
	return nil
}

func (m *Player) GetVersionedUuid() isPlayer_VersionedUuid {
	if m != nil {
		return m.VersionedUuid
	}
	return nil
}

func (x *Player) GetV1Uuid() []byte {
	if x, ok := x.GetVersionedUuid().(*Player_V1Uuid); ok {
		return x.V1Uuid
	}
	return nil
}

func (x *Player) GetV2Uuid() []byte {
	if x, ok := x.GetVersionedUuid().(*Player_V2Uuid); ok {
		return x.V2Uuid
	}
	return nil
}

func (x *Player) GetNested() *Player_NestedMsg {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *Player) GetOptionalNested() *Player_NestedMsg {
	if x != nil {
		return x.OptionalNested
	}
	return nil
}

func (x *Player) GetOptUuid() []byte {
	if x != nil {
		return x.OptUuid
	}
	return nil
}

func (x *Player) GetMapInt32Uuid() map[int32][]byte {
	if x != nil {
		return x.MapInt32Uuid
	}
	return nil
}

func (x *Player) GetMapInt64Uuid() map[int64][]byte {
	if x != nil {
		return x.MapInt64Uuid
	}
	return nil
}

func (x *Player) GetMapUint32Uuid() map[uint32][]byte {
	if x != nil {
		return x.MapUint32Uuid
	}
	return nil
}

func (x *Player) GetMapUint64Uuid() map[uint64][]byte {
	if x != nil {
		return x.MapUint64Uuid
	}
	return nil
}

func (x *Player) GetMapSint32Uuid() map[int32][]byte {
	if x != nil {
		return x.MapSint32Uuid
	}
	return nil
}

func (x *Player) GetMapSint64Uuid() map[int64][]byte {
	if x != nil {
		return x.MapSint64Uuid
	}
	return nil
}

func (x *Player) GetMapFixed32Uuid() map[uint32][]byte {
	if x != nil {
		return x.MapFixed32Uuid
	}
	return nil
}

func (x *Player) GetMapFixed64Uuid() map[uint64][]byte {
	if x != nil {
		return x.MapFixed64Uuid
	}
	return nil
}

func (x *Player) GetMapSfixed32Uuid() map[int32][]byte {
	if x != nil {
		return x.MapSfixed32Uuid
	}
	return nil
}

func (x *Player) GetMapSfixed64Uuid() map[int64][]byte {
	if x != nil {
		return x.MapSfixed64Uuid
	}
	return nil
}

func (x *Player) GetMapBoolUuid() map[bool][]byte {
	if x != nil {
		return x.MapBoolUuid
	}
	return nil
}

func (x *Player) GetMapStringUuid() map[string][]byte {
	if x != nil {
		return x.MapStringUuid
	}
	return nil
}

func (x *Player) GetMapInt32Uuids() map[int32][]byte {
	if x != nil {
		return x.MapInt32Uuids
	}
	return nil
}

func (x *Player) GetMapInt64Uuids() map[int64][]byte {
	if x != nil {
		return x.MapInt64Uuids
	}
	return nil
}

func (x *Player) GetMapUint32Uuids() map[uint32][]byte {
	if x != nil {
		return x.MapUint32Uuids
	}
	return nil
}

func (x *Player) GetMapUint64Uuids() map[uint64][]byte {
	if x != nil {
		return x.MapUint64Uuids
	}
	return nil
}

func (x *Player) GetMapSint32Uuids() map[int32][]byte {
	if x != nil {
		return x.MapSint32Uuids
	}
	return nil
}

func (x *Player) GetMapSint64Uuids() map[int64][]byte {
	if x != nil {
		return x.MapSint64Uuids
	}
	return nil
}

func (x *Player) GetMapFixed32Uuids() map[uint32][]byte {
	if x != nil {
		return x.MapFixed32Uuids
	}
	return nil
}

func (x *Player) GetMapFixed64Uuids() map[uint64][]byte {
	if x != nil {
		return x.MapFixed64Uuids
	}
	return nil
}

func (x *Player) GetMapSfixed32Uuids() map[int32][]byte {
	if x != nil {
		return x.MapSfixed32Uuids
	}
	return nil
}

func (x *Player) GetMapSfixed64Uuids() map[int64][]byte {
	if x != nil {
		return x.MapSfixed64Uuids
	}
	return nil
}

func (x *Player) GetMapBoolUuids() map[bool][]byte {
	if x != nil {
		return x.MapBoolUuids
	}
	return nil
}

func (x *Player) GetMapStringUuids() map[string][]byte {
	if x != nil {
		return x.MapStringUuids
	}
	return nil
}

func (x *Player) GetChild() *Child {
	if x != nil {
		return x.Child
	}
	return nil
}

type isPlayer_VersionedUuid interface {
	isPlayer_VersionedUuid()
}

type Player_V1Uuid struct {
	V1Uuid []byte `protobuf:"bytes,6,opt,name=v1_uuid,json=v1Uuid,proto3,oneof"`
}

type Player_V2Uuid struct {
	V2Uuid []byte `protobuf:"bytes,7,opt,name=v2_uuid,json=v2Uuid,proto3,oneof"`
}

func (*Player_V1Uuid) isPlayer_VersionedUuid() {}

func (*Player_V2Uuid) isPlayer_VersionedUuid() {}

type Child struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChildUuid    []byte            `protobuf:"bytes,1,opt,name=child_uuid,json=childUuid,proto3" json:"child_uuid,omitempty"`
	ChildUuids   [][]byte          `protobuf:"bytes,2,rep,name=child_uuids,json=childUuids,proto3" json:"child_uuids,omitempty"`
	MapChildUuid map[string][]byte `protobuf:"bytes,3,rep,name=map_child_uuid,json=mapChildUuid,proto3" json:"map_child_uuid,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Child) Reset() {
	*x = Child{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Child) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Child) ProtoMessage() {}

func (x *Child) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Child.ProtoReflect.Descriptor instead.
func (*Child) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1}
}

func (x *Child) GetChildUuid() []byte {
	if x != nil {
		return x.ChildUuid
	}
	return nil
}

func (x *Child) GetChildUuids() [][]byte {
	if x != nil {
		return x.ChildUuids
	}
	return nil
}

func (x *Child) GetMapChildUuid() map[string][]byte {
	if x != nil {
		return x.MapChildUuid
	}
	return nil
}

// Nested UUID
type Player_NestedMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedUuid []byte `protobuf:"bytes,1,opt,name=nested_uuid,json=nestedUuid,proto3" json:"nested_uuid,omitempty"`
}

func (x *Player_NestedMsg) Reset() {
	*x = Player_NestedMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player_NestedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player_NestedMsg) ProtoMessage() {}

func (x *Player_NestedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player_NestedMsg.ProtoReflect.Descriptor instead.
func (*Player_NestedMsg) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Player_NestedMsg) GetNestedUuid() []byte {
	if x != nil {
		return x.NestedUuid
	}
	return nil
}

var File_test_proto protoreflect.FileDescriptor

var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x75, 0x75,
	0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x22, 0xed, 0x20,
	0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x07,
	0x76, 0x31, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x06, 0x76, 0x31, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x32, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x76, 0x32, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x4f, 0x0a,
	0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x48, 0x01, 0x52, 0x0e, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x02, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4f,
	0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x4f, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x68, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x52, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x75, 0x69, 0x64,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x55, 0x75, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d,
	0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x0f,
	0x6d, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x55, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x75, 0x69,
	0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x55, 0x75,
	0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x6d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x12, 0x58,
	0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x75, 0x69, 0x64,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x55, 0x75,
	0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x4c, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x75, 0x69, 0x64,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x52, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x75, 0x69, 0x64,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55,
	0x75, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x55, 0x0a, 0x10,
	0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x75,
	0x69, 0x64, 0x73, 0x12, 0x55, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x55, 0x75, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x55, 0x0a, 0x10, 0x6d, 0x61,
	0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64,
	0x73, 0x12, 0x55, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x75,
	0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x75,
	0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x1d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x55, 0x75, 0x69,
	0x64, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x55, 0x75, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x5b, 0x0a, 0x12,
	0x6d, 0x61, 0x70, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x68,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x55, 0x75, 0x69,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x5b, 0x0a, 0x12, 0x6d, 0x61, 0x70,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18,
	0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x55,
	0x75, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x42, 0x6f,
	0x6f, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x55, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x55, 0x75, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x1a, 0x2c, 0x0a, 0x09,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x75, 0x69, 0x64, 0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12,
	0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40,
	0x0a, 0x12, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x75, 0x69,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x55,
	0x75, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61,
	0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42,
	0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x55, 0x75, 0x69,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x10, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x55, 0x75, 0x69,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x55, 0x75, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d,
	0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41,
	0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x75,
	0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x55, 0x75, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15,
	0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x55, 0x75, 0x69, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0f, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x55, 0x75, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f,
	0x6c, 0x55, 0x75, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x55, 0x75, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22, 0xd8, 0x01,
	0x0a, 0x05, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x55, 0x75, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x55, 0x75, 0x69, 0x64, 0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x55, 0x75, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x41, 0x0a, 0x17, 0x6c, 0x69, 0x2e, 0x78,
	0x69, 0x61, 0x6d, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x50, 0x00, 0x5a, 0x24, 0x78, 0x69, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x2f, 0x75,
	0x75, 0x69, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_test_proto_rawDescOnce sync.Once
	file_test_proto_rawDescData = file_test_proto_rawDesc
)

func file_test_proto_rawDescGZIP() []byte {
	file_test_proto_rawDescOnce.Do(func() {
		file_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_proto_rawDescData)
	})
	return file_test_proto_rawDescData
}

var file_test_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_test_proto_goTypes = []interface{}{
	(*Player)(nil),           // 0: uuidhelper.test.Player
	(*Child)(nil),            // 1: uuidhelper.test.Child
	(*Player_NestedMsg)(nil), // 2: uuidhelper.test.Player.NestedMsg
	nil,                      // 3: uuidhelper.test.Player.MapInt32UuidEntry
	nil,                      // 4: uuidhelper.test.Player.MapInt64UuidEntry
	nil,                      // 5: uuidhelper.test.Player.MapUint32UuidEntry
	nil,                      // 6: uuidhelper.test.Player.MapUint64UuidEntry
	nil,                      // 7: uuidhelper.test.Player.MapSint32UuidEntry
	nil,                      // 8: uuidhelper.test.Player.MapSint64UuidEntry
	nil,                      // 9: uuidhelper.test.Player.MapFixed32UuidEntry
	nil,                      // 10: uuidhelper.test.Player.MapFixed64UuidEntry
	nil,                      // 11: uuidhelper.test.Player.MapSfixed32UuidEntry
	nil,                      // 12: uuidhelper.test.Player.MapSfixed64UuidEntry
	nil,                      // 13: uuidhelper.test.Player.MapBoolUuidEntry
	nil,                      // 14: uuidhelper.test.Player.MapStringUuidEntry
	nil,                      // 15: uuidhelper.test.Player.MapInt32UuidsEntry
	nil,                      // 16: uuidhelper.test.Player.MapInt64UuidsEntry
	nil,                      // 17: uuidhelper.test.Player.MapUint32UuidsEntry
	nil,                      // 18: uuidhelper.test.Player.MapUint64UuidsEntry
	nil,                      // 19: uuidhelper.test.Player.MapSint32UuidsEntry
	nil,                      // 20: uuidhelper.test.Player.MapSint64UuidsEntry
	nil,                      // 21: uuidhelper.test.Player.MapFixed32UuidsEntry
	nil,                      // 22: uuidhelper.test.Player.MapFixed64UuidsEntry
	nil,                      // 23: uuidhelper.test.Player.MapSfixed32UuidsEntry
	nil,                      // 24: uuidhelper.test.Player.MapSfixed64UuidsEntry
	nil,                      // 25: uuidhelper.test.Player.MapBoolUuidsEntry
	nil,                      // 26: uuidhelper.test.Player.MapStringUuidsEntry
	nil,                      // 27: uuidhelper.test.Child.MapChildUuidEntry
}
var file_test_proto_depIdxs = []int32{
	2,  // 0: uuidhelper.test.Player.nested:type_name -> uuidhelper.test.Player.NestedMsg
	2,  // 1: uuidhelper.test.Player.optional_nested:type_name -> uuidhelper.test.Player.NestedMsg
	3,  // 2: uuidhelper.test.Player.map_int32_uuid:type_name -> uuidhelper.test.Player.MapInt32UuidEntry
	4,  // 3: uuidhelper.test.Player.map_int64_uuid:type_name -> uuidhelper.test.Player.MapInt64UuidEntry
	5,  // 4: uuidhelper.test.Player.map_uint32_uuid:type_name -> uuidhelper.test.Player.MapUint32UuidEntry
	6,  // 5: uuidhelper.test.Player.map_uint64_uuid:type_name -> uuidhelper.test.Player.MapUint64UuidEntry
	7,  // 6: uuidhelper.test.Player.map_sint32_uuid:type_name -> uuidhelper.test.Player.MapSint32UuidEntry
	8,  // 7: uuidhelper.test.Player.map_sint64_uuid:type_name -> uuidhelper.test.Player.MapSint64UuidEntry
	9,  // 8: uuidhelper.test.Player.map_fixed32_uuid:type_name -> uuidhelper.test.Player.MapFixed32UuidEntry
	10, // 9: uuidhelper.test.Player.map_fixed64_uuid:type_name -> uuidhelper.test.Player.MapFixed64UuidEntry
	11, // 10: uuidhelper.test.Player.map_sfixed32_uuid:type_name -> uuidhelper.test.Player.MapSfixed32UuidEntry
	12, // 11: uuidhelper.test.Player.map_sfixed64_uuid:type_name -> uuidhelper.test.Player.MapSfixed64UuidEntry
	13, // 12: uuidhelper.test.Player.map_bool_uuid:type_name -> uuidhelper.test.Player.MapBoolUuidEntry
	14, // 13: uuidhelper.test.Player.map_string_uuid:type_name -> uuidhelper.test.Player.MapStringUuidEntry
	15, // 14: uuidhelper.test.Player.map_int32_uuids:type_name -> uuidhelper.test.Player.MapInt32UuidsEntry
	16, // 15: uuidhelper.test.Player.map_int64_uuids:type_name -> uuidhelper.test.Player.MapInt64UuidsEntry
	17, // 16: uuidhelper.test.Player.map_uint32_uuids:type_name -> uuidhelper.test.Player.MapUint32UuidsEntry
	18, // 17: uuidhelper.test.Player.map_uint64_uuids:type_name -> uuidhelper.test.Player.MapUint64UuidsEntry
	19, // 18: uuidhelper.test.Player.map_sint32_uuids:type_name -> uuidhelper.test.Player.MapSint32UuidsEntry
	20, // 19: uuidhelper.test.Player.map_sint64_uuids:type_name -> uuidhelper.test.Player.MapSint64UuidsEntry
	21, // 20: uuidhelper.test.Player.map_fixed32_uuids:type_name -> uuidhelper.test.Player.MapFixed32UuidsEntry
	22, // 21: uuidhelper.test.Player.map_fixed64_uuids:type_name -> uuidhelper.test.Player.MapFixed64UuidsEntry
	23, // 22: uuidhelper.test.Player.map_sfixed32_uuids:type_name -> uuidhelper.test.Player.MapSfixed32UuidsEntry
	24, // 23: uuidhelper.test.Player.map_sfixed64_uuids:type_name -> uuidhelper.test.Player.MapSfixed64UuidsEntry
	25, // 24: uuidhelper.test.Player.map_bool_uuids:type_name -> uuidhelper.test.Player.MapBoolUuidsEntry
	26, // 25: uuidhelper.test.Player.map_string_uuids:type_name -> uuidhelper.test.Player.MapStringUuidsEntry
	1,  // 26: uuidhelper.test.Player.child:type_name -> uuidhelper.test.Child
	27, // 27: uuidhelper.test.Child.map_child_uuid:type_name -> uuidhelper.test.Child.MapChildUuidEntry
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_test_proto_init() }
func file_test_proto_init() {
	if File_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Child); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player_NestedMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_test_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Player_V1Uuid)(nil),
		(*Player_V2Uuid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_proto_goTypes,
		DependencyIndexes: file_test_proto_depIdxs,
		MessageInfos:      file_test_proto_msgTypes,
	}.Build()
	File_test_proto = out.File
	file_test_proto_rawDesc = nil
	file_test_proto_goTypes = nil
	file_test_proto_depIdxs = nil
}

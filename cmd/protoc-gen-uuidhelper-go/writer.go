package main

import (
	"google.golang.org/protobuf/compiler/protogen"
	"strings"
	"xiam.li/uuidhelper/core"
)

type goFileWriter struct {
	gen  *protogen.Plugin
	file *protogen.File
	g    *protogen.GeneratedFile
}

func (w *goFileWriter) GenerateFileHeader() {
	w.g.P("// Code generated by protoc-gen-uuidhelper-go. DO NOT EDIT.")
	w.g.P("// Versions:")
	w.g.P("// - protoc-gen-uuidhelper-go ", version)
	w.g.P("// - protoc v", core.ProtocVersion(w.gen))
	if w.file.Proto.GetOptions().GetDeprecated() {
		w.g.P("// ", w.file.Desc.Path(), " is a deprecated file.")
	} else {
		w.g.P("// source: ", w.file.Desc.Path())
	}
	w.g.P()
	w.g.P("package ", w.file.GoPackageName)
	w.g.P()
	w.g.P("import \"github.com/google/uuid\"")
}

func (w *goFileWriter) GenerateUUIDHelper(msg *protogen.Message, field *protogen.Field) {
	// original proto field name, e.g. "session_uuid"
	name := string(field.Desc.Name())

	// strip the "_uuid" suffix
	base := strings.TrimSuffix(name, "_uuid")

	camel := core.SnakeToCamelCase(base)

	getter := "Get" + camel + "Uuid"
	reader := "Get" + camel + "UUID"
	setter := camel + "Uuid"
	writer := "Set" + camel + "UUID"

	// read helper
	w.g.P("func (m *", msg.GoIdent, ") ", reader, "() uuid.UUID {")
	w.g.P("    return uuid.Must(uuid.FromBytes(m.", getter, "()))")
	w.g.P("}")
	w.g.P()

	// write helper
	w.g.P("func (m *", msg.GoIdent, ") ", writer, "(u uuid.UUID) {")
	w.g.P("    m.", setter, " = u[:]")
	w.g.P("}")
	w.g.P()
}

func (w *goFileWriter) Close() {}

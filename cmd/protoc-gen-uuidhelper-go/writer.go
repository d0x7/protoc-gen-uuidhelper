package main

import (
	"google.golang.org/protobuf/compiler/protogen"
	"strings"
	"xiam.li/uuidhelper/core"
)

type goFileWriter struct {
	gen  *protogen.Plugin
	file *protogen.File
	g    *protogen.GeneratedFile
}

func (w *goFileWriter) GenerateFileHeader() {
	w.g.P("// Code generated by protoc-gen-uuidhelper-go. DO NOT EDIT.")
	w.g.P("// Versions:")
	w.g.P("// - protoc-gen-uuidhelper-go ", version)
	w.g.P("// - protoc v", core.ProtocVersion(w.gen))
	if w.file.Proto.GetOptions().GetDeprecated() {
		w.g.P("// ", w.file.Desc.Path(), " is a deprecated file.")
	} else {
		w.g.P("// source: ", w.file.Desc.Path())
	}
	w.g.P()
	w.g.P("package ", w.file.GoPackageName)
	w.g.P()
	w.g.P("import \"github.com/google/uuid\"")
}

func (w *goFileWriter) GenerateSingleField(msg *protogen.Message, field *protogen.Field) {

	// original proto field name, e.g. "session_uuid"
	name := string(field.Desc.Name())

	// strip the "_uuid" suffix
	base := strings.TrimSuffix(name, "_uuid")

	camel := core.SnakeToCamelCase(base)

	getter := "Get" + camel + "Uuid"
	reader := "Get" + camel + "UUID"
	setter := camel + "Uuid"
	writer := "Set" + camel + "UUID"

	if field.Desc.HasOptionalKeyword() { // optional field
		// read helper
		w.g.P("func (m *", msg.GoIdent, ") ", reader, "() uuid.UUID {")
		w.g.P("    if bytes := m.", getter, "(); bytes == nil {")
		w.g.P("        return uuid.Nil")
		w.g.P("    } else {")
		w.g.P("        return uuid.Must(uuid.FromBytes(bytes))")
		w.g.P("    }")
		w.g.P("}")
		w.g.P()

		// write helper
		w.g.P("func (m *", msg.GoIdent, ") ", writer, "(u uuid.UUID) {")
		w.g.P("    m.", setter, " = u[:]")
		w.g.P("}")
		w.g.P()
	} else if oneof := field.Oneof; oneof != nil { // oneof field
		oneOfSetter := core.DescriptorToCamelCase(oneof.Desc)

		// read helper
		w.g.P("func (m *", msg.GoIdent, ") ", reader, "() uuid.UUID {")
		w.g.P("    if bytes := m.", getter, "(); bytes == nil {")
		w.g.P("        return uuid.Nil")
		w.g.P("    } else {")
		w.g.P("        return uuid.Must(uuid.FromBytes(bytes))")
		w.g.P("    }")
		w.g.P("}")
		w.g.P()

		// write helper
		w.g.P("func (m *", msg.GoIdent, ") ", writer, "(u uuid.UUID) {")
		w.g.P("m.", oneOfSetter, " = &", msg.GoIdent, "_", setter, "{", setter, ": u[:]}") // oneof field
		w.g.P("}")
		w.g.P()
	} else { // Not an optional or an oneof field
		// read helper
		w.g.P("func (m *", msg.GoIdent, ") ", reader, "() uuid.UUID {")
		w.g.P("    return uuid.Must(uuid.FromBytes(m.", getter, "()))")
		w.g.P("}")
		w.g.P()

		// write helper
		w.g.P("func (m *", msg.GoIdent, ") ", writer, "(u uuid.UUID) {")
		w.g.P("    m.", setter, " = u[:]")
		w.g.P("}")
		w.g.P()
	}
}

func (w *goFileWriter) GenerateListField(msg *protogen.Message, field *protogen.Field) {
	// original proto field name, e.g. "game_uuids"
	name := string(field.Desc.Name())

	// strip the "_uuid" suffix
	base := strings.TrimSuffix(name, "_uuids")

	camel := core.SnakeToCamelCase(base)

	getter := "Get" + camel + "Uuids"
	reader := "Get" + camel + "UUIDs"
	setter := camel + "Uuids"
	writer := "Set" + camel + "UUIDs"
	adder := "Add" + camel + "UUIDs"

	// read helper
	w.g.P("func (m *", msg.GoIdent, ") ", reader, "() []uuid.UUID {")
	w.g.P("uuids := m.", getter, "()")
	w.g.P("if len(uuids) == 0 {")
	w.g.P("return nil")
	w.g.P("}")
	w.g.P("uuidsSlice := make([]uuid.UUID, len(uuids))")
	w.g.P("for i, uid := range uuids {")
	w.g.P("if len(uid) != 16 {")
	w.g.P("return nil")
	w.g.P("}")
	w.g.P("uuidsSlice[i] = uuid.Must(uuid.FromBytes(uid))")
	w.g.P("}")
	w.g.P("return uuidsSlice")
	w.g.P("}")
	w.g.P()

	// write helper
	w.g.P("func (m *", msg.GoIdent, ") ", writer, "(u []uuid.UUID) {")
	w.g.P("if len(u) == 0 {")
	w.g.P("m.", setter, " = nil")
	w.g.P("return")
	w.g.P("}")
	w.g.P("uuids := make([][]byte, len(u))")
	w.g.P("for i, uid := range u {")
	w.g.P("uuids[i] = uid[:]")
	w.g.P("}")
	w.g.P("m.", setter, " = uuids")
	w.g.P("}")
	w.g.P()

	w.g.P("func (m *", msg.GoIdent, ") ", adder, "(u ...uuid.UUID) {")
	w.g.P("if m.", setter, " == nil {")
	w.g.P("m.", setter, " = make([][]byte, 0, len(u))")
	w.g.P("}")
	w.g.P("for _, id := range u {")
	w.g.P("m.", setter, " = append(m.", setter, ", id[:])")
	w.g.P("}")
	w.g.P("}")
	w.g.P()
}

func (w *goFileWriter) Close() {}

package main

import (
	"google.golang.org/protobuf/compiler/protogen"
	"strings"
	"xiam.li/uuidhelper/core"
)

type kotlinFileWriter struct {
	gen  *protogen.Plugin
	file *protogen.File
	g    *protogen.GeneratedFile
}

func (w *kotlinFileWriter) GenerateFileHeader() {
	javaPackage := w.file.Proto.GetOptions().GetJavaPackage()
	if javaPackage == "" {
		if protoPkg := w.file.Proto.GetPackage(); protoPkg != "" {
			javaPackage = protoPkg
		} else {
			javaPackage = "pb" // Fallback if no java_package is defined
		}
	}

	w.g.P("// Code generated by protoc-gen-uuidhelper-kotlin. DO NOT EDIT.")
	w.g.P("// Versions:")
	w.g.P("// - protoc-gen-uuidhelper-kotlin ", version)
	w.g.P("// - protoc v", core.ProtocVersion(w.gen))
	if w.file.Proto.GetOptions().GetDeprecated() {
		w.g.P("// ", w.file.Desc.Path(), " is a deprecated file.")
	} else {
		w.g.P("// source: ", w.file.Desc.Path())
	}
	w.g.P()
	w.g.P("package ", javaPackage)
	w.g.P()
	w.g.P("import com.google.protobuf.ByteString")
	w.g.P("import java.util.*")
	w.g.P("import java.nio.ByteBuffer")
	w.g.P()
	w.g.P("// Converts UUID to ByteString (protobuf `bytes`)")
	w.g.P("private fun uuidToByteString(uuid: UUID): ByteString {")
	w.g.P("	val buffer = ByteBuffer.allocate(16)")
	w.g.P("	buffer.putLong(uuid.mostSignificantBits)")
	w.g.P("	buffer.putLong(uuid.leastSignificantBits)")
	w.g.P("	buffer.flip()")
	w.g.P("	return ByteString.copyFrom(buffer)")
	w.g.P("}")
	w.g.P()
	w.g.P("// Converts ByteString to UUID")
	w.g.P("private fun byteStringToUUID(bytes: ByteString): UUID {")
	w.g.P("	val buffer = bytes.asReadOnlyByteBuffer()")
	w.g.P("	return UUID(buffer.long, buffer.long)")
	w.g.P("}")
	w.g.P()
}

func (w *kotlinFileWriter) GenerateUUIDHelper(msg *protogen.Message, field *protogen.Field) {
	// original proto field name, e.g. "session_uuid"
	name := string(field.Desc.Name())

	// strip the "_uuid" suffix
	base := strings.TrimSuffix(name, "_uuid")

	property := core.DescriptorToLowerCamelCase(field.Desc)

	// PascalCase
	camelBase := core.SnakeToCamelCase(base)

	// extension name
	methodName := camelBase + "UUID"

	javaImport := toJavaImport(msg)

	// DSL
	w.g.P("var ", javaImport.KtSubClass, ".Dsl.", methodName, ": UUID")
	w.g.P("    get() = byteStringToUUID(this.", property, ")")
	w.g.P("    set(value) {")
	w.g.P("        this.", property, " = uuidToByteString(value)")
	w.g.P("    }")
	w.g.P()

	// Java Accessor
	w.g.P("fun ", javaImport.Class, ".", javaImport.SubClass, ".", methodName, "(): UUID = byteStringToUUID(this.", property, ")")
	w.g.P()
}

func (w *kotlinFileWriter) Close() {}

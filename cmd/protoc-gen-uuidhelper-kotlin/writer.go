package main

import (
	"google.golang.org/protobuf/compiler/protogen"
	"strings"
	"xiam.li/uuidhelper/core"
)

type kotlinFileWriter struct {
	gen  *protogen.Plugin
	file *protogen.File
	g    *protogen.GeneratedFile

	useThreadLocalBufferPool bool
}

func (w *kotlinFileWriter) GenerateFileHeader() {
	javaPackage := w.file.Proto.GetOptions().GetJavaPackage()
	if javaPackage == "" {
		if protoPkg := w.file.Proto.GetPackage(); protoPkg != "" {
			javaPackage = protoPkg
		} else {
			javaPackage = "pb" // Fallback if no java_package is defined
		}
	}

	w.g.P("// Code generated by protoc-gen-uuidhelper-kotlin. DO NOT EDIT.")
	w.g.P("// Versions:")
	w.g.P("// - protoc-gen-uuidhelper-kotlin ", version)
	w.g.P("// - protoc v", core.ProtocVersion(w.gen))
	if w.file.Proto.GetOptions().GetDeprecated() {
		w.g.P("// ", w.file.Desc.Path(), " is a deprecated file.")
	} else {
		w.g.P("// source: ", w.file.Desc.Path())
	}
	w.g.P()
	w.g.P("package ", javaPackage)
	w.g.P()
	w.g.P("import com.google.protobuf.ByteString")
	w.g.P("import java.util.*")
	w.g.P("import java.nio.ByteBuffer")
	w.g.P()

	if w.useThreadLocalBufferPool {
		w.g.P("private val bufferPool = ThreadLocal.withInitial { ByteBuffer.allocate(16) }")
		w.g.P()
	}

	w.g.P("// Converts UUID to ByteString (protobuf `bytes`)")
	w.g.P("private fun uuidToByteString(uuid: UUID): ByteString {")
	if w.useThreadLocalBufferPool {
		w.g.P("	val buffer = bufferPool.get()")
		w.g.P("	buffer.clear()")
	} else {
		w.g.P("	val buffer = ByteBuffer.allocate(16)")
	}
	w.g.P("	buffer.putLong(uuid.mostSignificantBits)")
	w.g.P("	buffer.putLong(uuid.leastSignificantBits)")
	w.g.P("	buffer.flip()")
	w.g.P("	return ByteString.copyFrom(buffer)")
	w.g.P("}")

	w.g.P()
	w.g.P("// Converts ByteString to UUID")
	w.g.P("private fun byteStringToUUID(bytes: ByteString): UUID {")
	w.g.P("	val buffer = bytes.asReadOnlyByteBuffer()")
	w.g.P("	return UUID(buffer.long, buffer.long)")
	w.g.P("}")
	w.g.P()
}

func (w *kotlinFileWriter) GenerateUUIDHelper(msg *protogen.Message, field *protogen.Field) {
	// original proto field name, e.g. "session_uuid"
	name := string(field.Desc.Name())

	// strip the "_uuid" suffix
	base := strings.TrimSuffix(name, "_uuid")

	property := core.DescriptorToLowerCamelCase(field.Desc)

	// PascalCase
	camelBase := core.SnakeToCamelCase(base)

	// extension name
	methodName := camelBase + "UUID"

	javaImport := toJavaImport(msg)

	// DSL

	// class.baseUUID read-only property
	w.g.P("var ", javaImport.KtSubClass, ".Dsl.", methodName, ": UUID")
	w.g.P("    get() = byteStringToUUID(this.", property, ")")
	w.g.P("    set(value) {")
	w.g.P("        this.", property, " = uuidToByteString(value)")
	w.g.P("    }")
	w.g.P()

	// Java Accessor

	// class.baseUUID read-only property
	w.g.P("val ", javaImport.Class, ".", javaImport.SubClass, ".", methodName, ": UUID")
	w.g.P("	get() = byteStringToUUID(this.", property, ")")
	w.g.P()
}

func (w *kotlinFileWriter) GenerateUUIDsHelper(msg *protogen.Message, field *protogen.Field) {
	// original proto field name, e.g. "game_uuids"
	name := string(field.Desc.Name())

	// strip the "_uuid" suffix
	base := strings.TrimSuffix(name, "_uuids")

	property := core.DescriptorToLowerCamelCase(field.Desc)

	// PascalCase
	camelBase := core.SnakeToCamelCase(base)

	// extension name
	methodName := camelBase + "UUIDs"

	javaImport := toJavaImport(msg)

	// DSL

	// class.baseUUIDs read-only property
	w.g.P("/**")
	w.g.P(" * Returns an unmodifiable list of ", base, " UUIDs.")
	w.g.P(" * Note: This list is read-only. Use add", methodName, "(), set", methodName, "(), or clear", methodName, "() to modify.")
	w.g.P(" */")
	w.g.P("val ", javaImport.KtSubClass, ".Dsl.", methodName, ": List<UUID>")
	w.g.P("	get() {")
	w.g.P("		val list = this.", property)
	w.g.P("		val result = mutableListOf<UUID>()")
	w.g.P("		for (entry in list) {")
	w.g.P("			result.add(byteStringToUUID(entry))")
	w.g.P("		}")
	w.g.P("		return Collections.unmodifiableList(result)")
	w.g.P("	}")
	w.g.P()

	// class.baseUUIDs[index] getter function
	w.g.P("fun ", javaImport.KtSubClass, ".Dsl.get", methodName, "(index: Int): UUID {")
	w.g.P("	return byteStringToUUID(this.", property, "[index])")
	w.g.P("}")
	w.g.P()

	// class.baseUUIDs getter function
	w.g.P("fun ", javaImport.KtSubClass, ".Dsl.get", methodName, "(): List<UUID> {")
	w.g.P("	val list = this.", property)
	w.g.P("	val result = mutableListOf<UUID>()")
	w.g.P("	for (i in 0 until list.size) {")
	w.g.P("		result.add(byteStringToUUID(list[i]))")
	w.g.P("	}")
	w.g.P("	return Collections.unmodifiableList(result)")
	w.g.P("}")
	w.g.P()

	// class.baseUUIDs setter function
	w.g.P("fun ", javaImport.KtSubClass, ".Dsl.set", methodName, "(value: Collection<UUID>) {")
	w.g.P("	val list = mutableListOf<ByteString>()")
	w.g.P("	for (i in 0 until value.size) {")
	w.g.P("		list.add(uuidToByteString(value.elementAt(i)))")
	w.g.P("	}")
	w.g.P("	", property, ".clear()")
	w.g.P("	", property, ".addAll(list)")
	w.g.P("}")
	w.g.P()

	// class.baseUUIDs clear function
	w.g.P("/**")
	w.g.P(" * Clears the backing list of ", base, " UUIDs.")
	w.g.P(" */")
	w.g.P("fun ", javaImport.KtSubClass, ".Dsl.clear", methodName, "() {")
	w.g.P("	", property, ".clear()")
	w.g.P("}")
	w.g.P()

	// class.baseUUIDs add function
	w.g.P("/**")
	w.g.P(" * Adds a ", base, " UUID to the backing list.")
	w.g.P(" * @param values The ", base, " UUID to add.")
	w.g.P(" * @see add", methodName, " for bulk addition.")
	w.g.P(" * @see set", methodName, " for replacing the list.")
	w.g.P(" * @see clear", methodName, " for clearing the list.")
	w.g.P(" */")
	w.g.P("fun ", javaImport.KtSubClass, ".Dsl.add", methodName, "(vararg values: UUID) {")
	w.g.P("	for (value in values) {")
	w.g.P("		", property, ".add(uuidToByteString(value))")
	w.g.P("	}")
	w.g.P("}")
	w.g.P()

	// class.baseUUIDs addAll function
	w.g.P("/**")
	w.g.P(" * Adds a collection of ", base, " UUIDs to the backing list.")
	w.g.P(" * @param values The collection of ", base, " UUIDs to add.")
	w.g.P(" * @see set", methodName, " for bulk addition.")
	w.g.P(" * @see clear", methodName, " for clearing the list.")
	w.g.P(" */")
	w.g.P("fun ", javaImport.KtSubClass, ".Dsl.addAll", methodName, "(values: Collection<UUID>) {")
	w.g.P("	for (value in values) {")
	w.g.P("		", property, ".add(uuidToByteString(value))")
	w.g.P("	}")
	w.g.P("}")
	w.g.P()

	// Java Accessors

	// class.baseUUIDs read-only property
	w.g.P("/**")
	w.g.P(" * Gets the list of ", base, " UUIDs.")
	w.g.P(" * Note: This list is read-only. Use add", methodName, "(), set", methodName, "(), or clear", methodName, "() to modify.")
	w.g.P(" */")
	w.g.P("val ", javaImport.Class, ".", javaImport.SubClass, ".", methodName, ": List<UUID>")
	w.g.P("	get() {")
	w.g.P("		val list = this.", property, "List")
	w.g.P("		val result = mutableListOf<UUID>()")
	w.g.P("		for (i in 0 until list.size) {")
	w.g.P("			result.add(byteStringToUUID(list[i]))")
	w.g.P("		}")
	w.g.P("		return Collections.unmodifiableList(result)")
	w.g.P("	}")
	w.g.P()

	// class.baseUUIDs[index] getter function
	w.g.P("/**")
	w.g.P(" * Gets a ", base, " UUID at the specified index.")
	w.g.P(" * @param index The index of the ", base, " UUID to get.")
	w.g.P(" * @return The ", base, " UUID at the specified index.")
	w.g.P(" * @see ", methodName, " for the full list.")
	w.g.P(" */")
	w.g.P("fun ", javaImport.Class, ".", javaImport.SubClass, ".get", methodName, "(index: Int): UUID {")
	w.g.P("	return byteStringToUUID(this.", property, "List[index])")
	w.g.P("}")
	w.g.P()

	// class.baseUUIDs getter function
	w.g.P("/**")
	w.g.P(" * Gets the list of ", base, " UUIDs.")
	w.g.P(" * Note: This list is read-only. Use add", methodName, "(), set", methodName, "(), or clear", methodName, "() to modify.")
	w.g.P(" * @see ", methodName, " for the full list.")
	w.g.P(" */")
	w.g.P("fun ", javaImport.Class, ".", javaImport.SubClass, ".get", methodName, "(): List<UUID> {")
	w.g.P("	return ", methodName)
	w.g.P("}")
}

func (w *kotlinFileWriter) Close() {}
